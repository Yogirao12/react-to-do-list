{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["List","props","useState","line","ch","dis","disp","key","index","style","textDecoration","value","className","display","id","onClick","App","task","updateTask","arr","updateArr","type","placeholder","onChange","e","target","Button","prev","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAiDA,SAASA,EAAKC,GAAO,MAEFC,oBAAS,GAFP,mBAEdC,EAFc,KAERC,EAFQ,OAGDF,oBAAS,GAHR,mBAGdG,EAHc,KAGTC,EAHS,KAWnB,OACE,oCACE,wBACEC,IAAKN,EAAMO,MACXC,MAAO,CAAEC,eAAgBP,EAAO,eAAiB,SAEhDF,EAAMO,MAAQ,EAJjB,KAIsBP,EAAMU,MAAO,IACjC,kBAAC,IAAD,CACEC,UAAU,MACVH,MAAO,CAAEI,QAASR,EAAM,eAAiB,QACzCS,GAAIb,EAAMO,MACVO,QAjBC,WAEPX,GAAG,GACHE,GAAK,QAqBMU,MAxEf,WAAe,MAEYd,qBAFZ,mBAERe,EAFQ,KAEFC,EAFE,OAGUhB,mBAAS,IAHnB,mBAGRiB,EAHQ,KAGHC,EAHG,KAgBb,OACE,oCACE,yBAAKR,UAAU,QACb,yBAAKA,UAAU,QACb,yCACY,gDAEZ,2BACES,KAAK,OACLC,YAAY,kBACZC,SAtBV,SAAgBC,GAEdN,EAAWM,EAAEC,OAAOd,QAqBZA,MAAOM,IAET,kBAACS,EAAA,EAAD,CAAQd,UAAU,MAAMG,QApBhC,WAEEK,GAAU,SAACO,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAiBV,OAEnBC,EAAW,MAgBH,kBAAC,IAAD,CAASN,UAAU,UAErB,4BACGO,EAAIS,KAAI,SAACjB,EAAOH,GACf,OAAO,kBAACR,EAAD,CAAMQ,MAAOA,EAAOG,MAAOA,YC5B5BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f345f84.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nfunction App() {\n  // states\n  let [task, updateTask] = useState();\n  let [arr, updateArr] = useState([]);\n  function change(e) {\n    // works when cliked on tasks\n    updateTask(e.target.value);\n  }\n\n  function mkarr() {\n    // adding new task in array\n    updateArr((prev) => {\n      return [...prev, task];\n    });\n    updateTask(\"\");\n  }\n  return (\n    <>\n      <div className=\"root\">\n        <div className=\"main\">\n          <h1>\n            ToDo List <span> üìù</span>\n          </h1>\n          <input\n            type=\"text\"\n            placeholder=\"write your task\"\n            onChange={change}\n            value={task}\n          />\n          <Button className=\"btn\" onClick={mkarr}>\n            <AddIcon className=\"plus\"></AddIcon>\n          </Button>\n          <ul>\n            {arr.map((value, index) => {\n              return <List index={index} value={value} />;\n            })}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction List(props) {\n  // states of list of tasks\n  let [line, ch] = useState(false);\n  let [dis, disp] = useState(true);\n\n  let cl = () => {\n    // when clicked on dustbin\n    ch(true);\n    disp(false);\n  };\n\n  return (\n    <>\n      <li\n        key={props.index}\n        style={{ textDecoration: line ? \"line-through\" : \"none\" }}\n      >\n        {props.index + 1}. {props.value}{\" \"}\n        <DeleteIcon\n          className=\"del\"\n          style={{ display: dis ? \"inline-block\" : \"none\" }}\n          id={props.index}\n          onClick={cl}\n        />\n      </li>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}